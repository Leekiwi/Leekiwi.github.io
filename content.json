{"meta":{"title":"Little ice","subtitle":"爱吃kiwi的博客-前端博客-web前端技术","description":"web前端技术博客，总结分享经验","author":"爱吃kiwi","url":"https://leekiwi.github.io"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-07-28T08:17:00.930Z","comments":false,"path":"about/index.html","permalink":"https://leekiwi.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there111👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 Mashiro\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"目前就读于上海财经大学\" }).then(function () { botui.message.add({ delay: 1500, content: \"向往技术却误入商科，但后来喜欢上了经济学…\" }).then(function () { botui.message.add({ delay: 1200, content: \"因为数据分析也需要Coder嘛\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻 R 语言和 Python，略懂 STATA，偶尔也折腾 HTML/CSS/JavaScript/PHP\" }).then(function () { botui.message.add({ delay: 1500, content: \"研究的方向，是经济/金融方向的数据分析（data science）以及机器学习（machine learning）\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢画画，希望有一天能够被称为画师\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫Mashiro呢？ 🤔\", value: \"why-mashiro\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"Mashiro以及站名都来自一部动画，因为和主角有一样的爱好~ 如果有兴趣可以找找首页上的视频~\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么是白猫呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"因为对GitHub有种执念… \" }).then(function () { botui.message.add({ delay: 1100, content: \"而且我真的是猫控！\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，看备案信息你就知道了=.= 本来想要zheng.xin的，但50万真买不起。。\" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-07-28T08:17:00.777Z","comments":false,"path":"bangumi/index.html","permalink":"https://leekiwi.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-07-28T08:17:00.617Z","comments":false,"path":"client/index.html","permalink":"https://leekiwi.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-07-28T08:17:00.465Z","comments":true,"path":"comment/index.html","permalink":"https://leekiwi.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-07-28T08:17:00.314Z","comments":false,"path":"donate/index.html","permalink":"https://leekiwi.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-07-28T08:17:00.161Z","comments":false,"path":"lab/index.html","permalink":"https://leekiwi.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-07-28T08:17:00.010Z","comments":true,"path":"links/index.html","permalink":"https://leekiwi.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-07-28T08:16:59.855Z","comments":false,"path":"music/index.html","permalink":"https://leekiwi.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-07-28T08:16:59.700Z","comments":true,"path":"rss/index.html","permalink":"https://leekiwi.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-07-30T01:28:12.921Z","comments":true,"path":"tags/index.html","permalink":"https://leekiwi.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-07-28T08:16:59.398Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://leekiwi.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-07-28T08:16:59.247Z","comments":false,"path":"video/index.html","permalink":"https://leekiwi.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"v-slot使用小结","slug":"v-slot小结","date":"2019-06-15T14:16:01.000Z","updated":"2019-08-06T08:18:19.514Z","comments":true,"path":"2019/06/15/v-slot小结/","link":"","permalink":"https://leekiwi.github.io/2019/06/15/v-slot小结/","excerpt":"","text":"v-slot插槽新增 在vue v2.6.0中，新引入了v-slot指令，他取代了slot和slot-scope这两个目前已经被废弃但是未被移除的特性。 // 根组件 &lt;template&gt; &lt;div&gt; &lt;mo&gt; &lt;template v-slot:header=&quot;slotProps&quot;&gt; &lt;h1&gt;{{slotProps.header + ' ' + msg}}&lt;/h1&gt; &lt;/template&gt; &lt;p&gt;A paragraph for the main content.&lt;/p&gt; &lt;p&gt;And another one.&lt;/p&gt; &lt;template v-slot:footer&gt; &lt;p&gt;Here&#39;s some contact info&lt;/p&gt; &lt;/template&gt; &lt;/mo&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import mo from &#39;./module.vue&#39; export default { components: { mo }, data() { return { msg: &#39;这是根组件的消息&#39; } } } &lt;/script&gt; // 子组件 &lt;template&gt; &lt;div&gt; --header start-- &lt;header&gt; &lt;slot name=&quot;header&quot; :header=&quot;header&quot;&gt;&lt;/slot&gt; &lt;/header&gt; --header over-- &lt;div&gt;&lt;/div&gt; --default start-- &lt;slot&gt;&lt;/slot&gt; --default over-- &lt;div&gt;&lt;/div&gt; --footer start-- &lt;footer&gt; &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt; &lt;/footer&gt; --dooter over-- &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { data() { return { header: &#39;来自子组件的头部消息&#39; } } } &lt;/script&gt; &lt;style scoped&gt; &lt;/style&gt; 组件中可以使用template标签，加v-slot指令制定具名插槽，当没有指定插槽name时，默认出口会带有隐含的名字“default”。 根组件可以利用v-slot:header=”slotProps”接受组件中的消息，组件中只需要在就可以了 如果被提供的内容只有一个默认插槽时，组件的标签可以直接被当做插槽的模板来使用 动态参数也可是使用到插槽当中 v-slot的缩写是#，但是如果使用#的话，必须始终使用具插槽来代替","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://leekiwi.github.io/tags/web/"},{"name":"vue","slug":"vue","permalink":"https://leekiwi.github.io/tags/vue/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"vue 父子组件通信","slug":"vue 父子组件间通信","date":"2019-06-12T14:16:01.000Z","updated":"2019-08-06T05:58:49.754Z","comments":true,"path":"2019/06/12/vue 父子组件间通信/","link":"","permalink":"https://leekiwi.github.io/2019/06/12/vue 父子组件间通信/","excerpt":"","text":"vue 父子组件通信 父组件调用一个子组件，父组件的属性如何能够传递给子组件使用，子组件里的数据如何能传递给父组件？下面我们通过一个demo来解答这个问题。 父组件&lt;template&gt; &lt;div class=&quot;parent&quot;&gt; 我是父组件 &lt;!--父组件监听子组件触发的say方法，调用自己的parentSay方法--&gt; &lt;!--通过:msg将父组件的数据传递给子组件--&gt; &lt;children :msg=&quot;msg&quot; @say=&quot;parentSay&quot;&gt;&lt;/children&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import Children from &#39;./children.vue&#39; export default { data () { return { msg: &#39;hello, children&#39; } }, methods: { // 参数就是子组件传递出来的数据 parentSay(msg){ console.log(msg) // hello, parent } }, // 引入子组件 components:{ children: Children } } &lt;/script&gt; 子组件&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;div class=&quot;children&quot; @click=&quot;say&quot;&gt; 我是子组件 &lt;div&gt; 父组件对我说：{{msg}} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { //父组件通过props属性传递进来的数据 props: { msg: { type: String, default: () =&gt; { return &#39;&#39; } } }, data () { return { childrenSay: &#39;hello, parent&#39; } }, methods: { // 子组件通过emit方法触发父组件中定义好的函数，从而将子组件中的数据传递给父组件 say(){ this.$emit(&#39;say&#39; , this.childrenSay); } } } &lt;/script&gt; 总结 vue的父子组件间通信可以总结成一句话：父组件通过 prop 给子组件下发数据，子组件通过$emit触发事件给父组件发送消息，即 prop 向下传递，事件向上传递。","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://leekiwi.github.io/tags/web/"},{"name":"vue","slug":"vue","permalink":"https://leekiwi.github.io/tags/vue/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"nextTick原理解析","slug":"nextTick","date":"2019-05-27T01:34:18.000Z","updated":"2019-08-01T03:00:57.419Z","comments":true,"path":"2019/05/27/nextTick/","link":"","permalink":"https://leekiwi.github.io/2019/05/27/nextTick/","excerpt":"","text":"nextTick 前言nextTick 是 Vue 的一个核心功能，在 Vue 内部实现中也经常用到 nextTick。但是，很多新手不理解 nextTick 的原理，甚至不清楚 nextTick 的作用。 那么，我们就先来看看 nextTick 是什么。 nextTick 功能看看官方文档的描述： 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 再看看官方示例： // 修改数据 vm.msg = &#39;Hello&#39; // DOM 还没有更新 Vue.nextTick(function () { // DOM 更新了 }) // 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示) Vue.nextTick() .then(function () { // DOM 更新了 }) 2.1.0 起新增：如果没有提供回调且在支持 Promise 的环境中，则返回一个 Promise。请注意 Vue 不自带 Promise 的 polyfill，所以如果你的目标浏览器不原生支持 Promise (IE：你们都看我干嘛)，你得自己提供 polyfill。 可以看到，nextTick 主要功能就是改变数据后让回调函数作用于 dom 更新后。很多人一看到这里就懵逼了，为什么需要在 dom 更新后再执行回调函数，我修改了数据后，不是 dom 自动就更新了吗？ 这个和 JS 中的 Event Loop 有关，网上教程不计其数，在此就不再赘述了。建议明白 Event Loop 后再继续向下阅读本文。 举个实际的例子： 我们有个带有分页器的表格，每次翻页需要选中第一项。正常情况下，我们想的是点击翻页器，向后台获取数据，更新表格数据，操纵表格 API 选中第一项。 但是，你会发现，表格数据是更新了，但是并没有选中第一项。因为，你选中第一项时，虽然数据更新了，但是 DOM 并没有更新。此时，你可以使用 nextTick ，在DOM更新后再操纵表格第一项的选中。 那么，nextTick 到底做了什么了才能实现在 DOM 更新后执行回调函数？ 源码分析nextTick 的源码位于src/core/util/next-tick.js，总计118行，十分的短小精悍，十分适合初次阅读源码的同学。 nextTick源码主要分为两块： 能力检测 根据能力检测以不同方式执行回调队列 能力检测这一块其实很简单，众所周知，Event Loop 分为宏任务（macro task）以及微任务（ micro task），不管执行宏任务还是微任务，完成后都会进入下一个 tick，并在两个 tick 之间执行UI渲染。 但是，宏任务耗费的时间是大于微任务的，所以在浏览器支持的情况下，优先使用微任务。如果浏览器不支持微任务，使用宏任务；但是，各种宏任务之间也有效率的不同，需要根据浏览器的支持情况，使用不同的宏任务。 nextTick在能力检测这一块，就是遵循的这种思想。 // Determine (macro) task defer implementation. // Technically setImmediate should be the ideal choice, but it&#39;s only available // in IE. The only polyfill that consistently queues the callback after all DOM // events triggered in the same loop is by using MessageChannel. /* istanbul ignore if */ // 如果浏览器不支持Promise，使用宏任务来执行nextTick回调函数队列 // 能力检测，测试浏览器是否支持原生的setImmediate（setImmediate只在IE中有效） if (typeof setImmediate !== &#39;undefined&#39; &amp;&amp; isNative(setImmediate)) { // 如果支持，宏任务（ macro task）使用setImmediate macroTimerFunc = () =&gt; { setImmediate(flushCallbacks) } // 同上 } else if (typeof MessageChannel !== &#39;undefined&#39; &amp;&amp; ( isNative(MessageChannel) || // PhantomJS MessageChannel.toString() === &#39;[object MessageChannelConstructor]&#39; )) { const channel = new MessageChannel() const port = channel.port2 channel.port1.onmessage = flushCallbacks macroTimerFunc = () =&gt; { port.postMessage(1) } } else { /* istanbul ignore next */ // 都不支持的情况下，使用setTimeout macroTimerFunc = () =&gt; { setTimeout(flushCallbacks, 0) } } 首先，检测浏览器是否支持 setImmediate，不支持就使用 MessageChannel，再不支持只能使用效率最差但是兼容性最好的 setTimeout了。 之后，检测浏览器是否支持 Promise，如果支持，则使用 Promise 来执行回调函数队列，毕竟微任务速度大于宏任务。如果不支持的话，就只能使用宏任务来执行回调函数队列。 执行回调函数队列执行回调函数队列的代码刚好在一头一尾 // 回调函数队列 const callbacks = [] // 异步锁 let pending = false // 执行回调函数 function flushCallbacks () { // 重置异步锁 pending = false // 防止出现nextTick中包含nextTick时出现问题，在执行回调函数队列前，提前复制备份，清空回调函数队列 const copies = callbacks.slice(0) callbacks.length = 0 // 执行回调函数队列 for (let i = 0; i &lt; copies.length; i++) { copies[i]() } } ... // 我们调用的nextTick函数 export function nextTick (cb?: Function, ctx?: Object) { let _resolve // 将回调函数推入回调队列 callbacks.push(() =&gt; { if (cb) { try { cb.call(ctx) } catch (e) { handleError(e, ctx, &#39;nextTick&#39;) } } else if (_resolve) { _resolve(ctx) } }) // 如果异步锁未锁上，锁上异步锁，调用异步函数，准备等同步函数执行完后，就开始执行回调函数队列 if (!pending) { pending = true if (useMacroTask) { macroTimerFunc() } else { microTimerFunc() } } // $flow-disable-line // 2.1.0新增，如果没有提供回调，并且支持Promise，返回一个Promise if (!cb &amp;&amp; typeof Promise !== &#39;undefined&#39;) { return new Promise(resolve =&gt; { _resolve = resolve }) } } 总体流程就是：接收回调函数，将回调函数推入回调函数队列中。 同时，在接收第一个回调函数时，执行能力检测中对应的异步方法（异步方法中调用了回调函数队列）。 如何保证只在接收第一个回调函数时执行异步方法？ nextTick 源码中使用了一个异步锁的概念，即接收第一个回调函数时，先关上锁，执行异步方法。此时，浏览器处于等待执行完同步代码就执行异步代码的情况。 打个比喻：相当于一群旅客准备上车，当第一个旅客上车的时候，车开始发动，准备出发，等到所有旅客都上车后，就可以正式开车了。 当然执行 flushCallbacks 函数时有个难以理解的点，即：为什么需要备份回调函数队列？执行的也是备份的回调函数队列？ 因为，会出现这么一种情况：nextTick 的回调函数中还使用 nextTick。如果 flushCallbacks 不做特殊处理，直接循环执行回调函数，会导致里面 nextTick 中的回调函数会进入回调队列。这就相当于，下一个班车的旅客上了上一个班车。 实现一个简易的nextTick说了这么多，我们来实现一个简单的 nextTick： let callbacks = [] let pending = false function nextTick (cb) { callbacks.push(cb) if (!pending) { pending = true setTimeout(flushCallback, 0) } } function flushCallback () { pending = false let copies = callbacks.slice() callbacks.length = 0 copies.forEach(copy =&gt; { copy() }) } 可以看到，在简易版的 nextTick 中，通过 nextTick 接收回调函数，通过 setTimeout 来异步执行回调函数。通过这种方式，可以实现在下一个 tick 中执行回调函数，即在UI重新渲染后执行回调函数。","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/tags/技术/"},{"name":"vue","slug":"vue","permalink":"https://leekiwi.github.io/tags/vue/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"编码规范 （一）HTML","slug":"编码规范(一)HTML","date":"2019-05-26T01:34:18.000Z","updated":"2019-07-30T06:17:33.793Z","comments":true,"path":"2019/05/26/编码规范(一)HTML/","link":"","permalink":"https://leekiwi.github.io/2019/05/26/编码规范(一)HTML/","excerpt":"","text":"前言统一的编码规范，有助于编写高质量、稳定、可维护的代码。 本文引自：编码规范 by @mdo黄金定律不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。实用为王尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。 一、语法 使用两个空格来代替制表符 嵌套元素应当缩进一次（即两个空格） 对于属性的定义，确保全部使用双引号，绝不要使用单引号。 不要在自闭合元素的尾部添加斜线 不要省略可选的结束标签 二、HTML5 doctype为每个 HTML 页面的第一行添加标准模式的声明，这样能够确保在每个浏览器中拥有一致的展现。 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;/html&gt; 三、语言属性强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。 &lt;html lang=&quot;en-us&quot;&gt; &lt;/html&gt; 四、IE 兼容模式IE 支持通过特定的 &lt;meta&gt; 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 edge mode，从而通知 IE 采用其所支持的最新的模式。 &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt; 五、字符编码通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记，从而全部与文档编码一致（一般采用 UTF-8 编码）。 &lt;meta charset=&quot;UTF-8&quot;&gt; 六、引入 CSS 和 JavaScript 文件根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 type 属性，因为 text/css 和 text/javascript 分别是它们的默认值。 &lt;!-- link --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;code-guide.css&quot;&gt; &lt;!-- style --&gt; &lt;style&gt;&lt;/style&gt; &lt;!-- script --&gt; &lt;script src=&quot;code-guide.js&quot;&gt;&lt;/script&gt; 七、属性顺序HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。 class id, name data-* src, for, type, href, value title, alt role, aria-* class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用，因此排在第二位。 &lt;a class=&quot;...&quot; id=&quot;...&quot; data-toggle=&quot;modal&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt; ![](...) 八、布尔型属性布尔型属性可以在声明时不赋值，直接写属性名认为是 true，不写认为是 false。 &lt;input type=&quot;text&quot; disabled required&gt; &lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt; &lt;select&gt; &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt; &lt;/select&gt; 九、减少标签的数量编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。 &lt;!-- 一般 --&gt; &lt;span class=&quot;avatar&quot;&gt; ![](...) &lt;/span&gt; &lt;!-- 更好 --&gt; ![](...) 十、尽量避免使用 JavaScript 生成的标签通过 JavaScript 生成的标签让内容变得不易查找、编辑，对搜索引擎不友好，并且降低性能。能避免时尽量避免。","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"css","slug":"css","permalink":"https://leekiwi.github.io/tags/css/"},{"name":"web前端","slug":"web前端","permalink":"https://leekiwi.github.io/tags/web前端/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"编码规范（二）CSS","slug":"编码规范(二)CSS","date":"2019-05-26T01:34:18.000Z","updated":"2019-07-30T05:58:23.443Z","comments":true,"path":"2019/05/26/编码规范(二)CSS/","link":"","permalink":"https://leekiwi.github.io/2019/05/26/编码规范(二)CSS/","excerpt":"前言统一的编码规范，有助于编写高质量、可读性强、易于维护的代码。 CSS 代码的编写，应该尽量简洁、高性能、高可维护性，达到三者的一个最佳平衡。不能为了简洁牺牲可维护性。 本文引自：编码规范 by @mdo 黄金定律不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。","text":"前言统一的编码规范，有助于编写高质量、可读性强、易于维护的代码。 CSS 代码的编写，应该尽量简洁、高性能、高可维护性，达到三者的一个最佳平衡。不能为了简洁牺牲可维护性。 本文引自：编码规范 by @mdo 黄金定律不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。 一、语法 用两个空格来代替 tab 单独的选择器单独放在一行 左花括号前添加一个空格 声明块的右花括号应当单独成行 : 后插入一个空格 每条声明都应该独占一行 所有声明语句都应当以分号结尾 以逗号分隔的属性值，逗号后面插入一个空格 不要在 rgb()、rgba()、hsl()、hsla() 或 rect() 值的内部的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。 .5 代替 0.5；-.5px 代替 -0.5px 十六进制值应该全部小写 尽量使用简写形式的十六进制值 为选择器中的属性添加双引号 避免为 0 值指定单位 /* Bad CSS */ .selector, .selector-secondary, .selector[type=text] { padding:15px; margin:0px 0px 15px; background-color:rgba(0, 0, 0, 0.5); box-shadow:0px 1px 2px #CCC,inset 0 1px 0 #FFFFFF } /* Good CSS */ .selector, .selector-secondary, .selector[type=&quot;text&quot;] { padding: 15px; margin-bottom: 15px; background-color: rgba(0,0,0,.5); box-shadow: 0 1px 2px #ccc, inset 0 1px 0 #fff; } 二、属性声明2.1 顺序相关的属性声明应当归为一组，并按照下面的顺序排列： 定位 盒模型 版式 视觉 由于定位可以从正常的文档流中移除元素，并且还能覆盖盒模型相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。 其他属性只是影响组件的内部或者是不影响前两组属性，因此排在后面。 .declaration-order { /* 定位 */ position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100; /* 盒模型 */ display: block; float: right; width: 100px; height: 100px; margin: 10px; padding: 10px; box-sizing: border-box; /* 版式 */ font: normal 13px &quot;Helvetica Neue&quot;, sans-serif; line-height: 1.5; color: #333; text-align: center; /* 视觉 */ background-color: #f5f5f5; border: 1px solid #e5e5e5; border-radius: 3px; box-shadow: 0 0 10px #000; /* 杂项 */ opacity: 1; } 2.2 简写形式的属性声明在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。 padding margin font background border border-radius 大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如 header 元素只需要设置上、下边距的值，因此，在必要的时候，只需覆盖这两个值就可以。 过度使用简写形式的属性声明 导致代码混乱 对属性值带来不必要的覆盖从而引起意外的副作用 重新的渲染造成浏览器资源的消耗 /* Bad example */ .element { margin: 0 0 10px; background: red; background: url(&quot;image.jpg&quot;); border-radius: 3px 3px 0 0; } /* Good example */ .element { margin-bottom: 10px; background-color: red; background-image: url(&quot;image.jpg&quot;); border-top-left-radius: 3px; border-top-right-radius: 3px; } 2.3 带前缀的属性当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。 /* Prefixed properties */ .selector { -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.15); box-shadow: 0 1px 2px rgba(0,0,0,.15); } 2.4 单行规则声明对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。 /* Single declarations on one line */ .span1 { width: 60px; } /* Multiple declarations, one per line */ .sprite { display: inline-block; width: 16px; height: 15px; background-image: url(../img/sprite.png); } 2.5 媒体查询（Media query）的位置将媒体查询尽可能放在相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。 三、class 命名 class 名称中只能出现小写字符和破折号，破折号应当用于相关 class 的命名 避免过度任意的简写 class 名称应当尽可能短，并且意义明确 使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式的名称 基于最近的父 class 或基本 class 作为新 class 的前缀 使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中 四、选择器 对于通用元素使用 class ，这样利于渲染性能的优化。 对于经常出现的组件，避免使用属性选择器 选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3 只有在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器） 五、代码组织 以组件为单位组织代码段 制定一致的注释规范 使用一致的空白符将代码分隔成块，这样利于扫描较大的文档 如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动 5.1 不要使用原生 @import与 &lt;link&gt; 标签相比，@import 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。 使用 Sass 或 Less 等 CSS 预处理器的 @import 指令，将多个 CSS 文件编译为一个文件 通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能 六、注释确保你的代码能够自描述、注释良好并且易于他人理解，可以很大程度地提高可维护性。 好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。 对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。 七、Less 和 Sass7.1 操作符为了提高可读性，在圆括号中的数学计算表达式的数值、变量和操作符之间均添加一个空格。 7.2 嵌套避免不必要的嵌套。这是因为虽然你可以使用嵌套，但是并不意味着应该使用嵌套。只有在必须将样式限制在父元素内（也就是后代选择器），并且存在多个需要嵌套的元素时才使用嵌套。 八、编辑器配置将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异： 用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。 保存文件时，删除尾部的空白符。 设置文件编码为 UTF-8。 在文件结尾添加一个空白行。 将这些配置信息添加到项目的 .editorconfig 文件中 生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"css","slug":"css","permalink":"https://leekiwi.github.io/tags/css/"},{"name":"web前端","slug":"web前端","permalink":"https://leekiwi.github.io/tags/web前端/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"mixins的实践与解析","slug":"mixins的实践与解析","date":"2019-05-26T01:34:18.000Z","updated":"2019-07-31T08:29:06.469Z","comments":true,"path":"2019/05/26/mixins的实践与解析/","link":"","permalink":"https://leekiwi.github.io/2019/05/26/mixins的实践与解析/","excerpt":"","text":"mixins 的实践与解析vue 提供了 mixins 这个 API，可以让我们将组件中的可复用功能抽取出来，放入 mixin 中，然后在组件中引入 mixin，可以让组件显得不再臃肿，提高了代码的可复用性。 如何理解 mixins 呢 ？我们可以将 mixins 理解成一个数组，数组中有单或多个 mixin，mixin 的本质就是一个 JS 对象，它可以有 data、created、methods 等等 vue 实例中拥有的所有属性，甚至可以在 mixins 中再次嵌套 mixins，It’s amazing ! 举个简单的栗子: &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;{{ message }}&lt;/h1&gt; &lt;/div&gt; const myMixin = { data() { return { message: &#39;this is mixin message&#39; } }, created() { console.log(&#39;mixin created&#39;) } } const vm = new Vue({ el: &#39;#app&#39;, mixins: [myMixin], data() { return { message: &#39;this is vue instance message&#39; } }, created() { console.log(this.message) // =&gt; Root Vue Instance console.log(&#39;vue instance created&#39;) // =&gt; created myMixin // =&gt; created Root Vue Instance } }) mixins 与 Vue Instance 合并时，会将 created 等钩子函数合并成数组，mixins 的钩子优先调用，当 data、methods 对象键值冲突时，以组件优先。 PS: 如果对 mixins 的概念还不太清的小伙伴，可以去 vue 官方文档 看一下 vue mixins 的基本概念和用法。 mixins 实现那 mixins 是如何实现的呢 ？当 vue 在实例化的时候，会调用 mergeOptions 函数进行 options 的合并，函数申明在 vue/src/core/util/options.js 文件。 export function mergeOptions( parent: Object, child: Object, vm?: Component ): Object { ... // 如果有 child.extends 递归调用 mergeOptions 实现属性拷贝 const extendsFrom = child.extends if (extendsFrom) { parent = mergeOptions(parent, extendsFrom, vm) } // 如果有 child.mixins 递归调用 mergeOptions 实现属性拷贝 if (child.mixins) { for (let i = 0, l = child.mixins.length; i &lt; l; i++) { parent = mergeOptions(parent, child.mixins[i], vm) } } // 申明 options 空对象，用来保存属性拷贝结果 const options = {} let key // 遍历 parent 对象，调用 mergeField 进行属性拷贝 for (key in parent) { mergeField(key) } // 遍历 parent 对象，调用 mergeField 进行属性拷贝 for (key in child) { if (!hasOwn(parent, key)) { mergeField(key) } } // 属性拷贝实现方法 function mergeField(key) { // 穿透赋值，默认为 defaultStrat const strat = strats[key] || defaultStrat options[key] = strat(parent[key], child[key], vm, key) } return options } 为了保持代码简洁，已经将 mergeOptions 函数不重要的代码删除，剩余部分我们慢慢来看。 const extendsFrom = child.extends if (extendsFrom) { parent = mergeOptions(parent, extendsFrom, vm) } 首先申明 extendsFrom 变量保存 child.extends，如果 extendsFrom 为真，递归调用 mergeOptions 进行属性拷贝，并且将 merge 结果保存到 parent 变量。 if (child.mixins) { for (let i = 0, l = child.mixins.length; i &lt; l; i++) { parent = mergeOptions(parent, child.mixins[i], vm) } } 如果 child.mixins 为真，循环 mixins 数组，递归调用 mergeOptions 实现属性拷贝，仍旧将 merge 结果保存到 parent 变量。 接下来是关于 parent、child 的属性赋值： const options = {} let key for (key in parent) { mergeField(key) } for (key in child) { if (!hasOwn(parent, key)) { mergeField(key) } } 申明 options 空对象，用来保存属性拷贝的结果，也作为递归调用 mergeOptions 的返回值。这里首先会调用 for…in 对 parent 进行循环，在循环中不断调用 mergeField 函数。 接着调用 for…in 对 child 进行循环，这里有点不太一样，会调用 hasOwn 判断 parent 上是否有这个 key，如果没有再调用 mergeField 函数，这样避免了重复调用。 那么这个 mergeField 函数到底是用来做什么的呢？ function mergeField(key) { // 穿透赋值，默认为 defaultStrat const strat = strats[key] || defaultStrat options[key] = strat(parent[key], child[key], vm, key) } mergeField 函数接收一个 key，首先会申明 strat 变量，如果 strats[key] 为真，就将 strats[key] 赋值给 strat。 const strats = config.optionMergeStrategies ... optionMergeStrategies: Object.create(null), ... strats 其实就是 Object.create(null)，Object.create 用来创建一个新对象，strats 默认是调用 Object.create(null) 生成的空对象。 顺便说一句，vue 也向外暴露了 Vue.config.optionMergeStrategies，可以实现自定义选项合并策略。 如果 strats[key] 为假，这里会用 || 做穿透赋值，将 defaultStrat 默认函数赋值给 strat。 const defaultStrat = function(parentVal: any, childVal: any): any { return childVal === undefined ? parentVal : childVal } defaultStrat 函数返回一个三元表达式，如果 childVal 为 undefined，返回 parentVal，否则返回 childVal，这里主要以 childVal 优先，这也是为什么有 component &gt; mixins &gt; extends 这样的优先级。 mergeField 函数最后会将调用 strat 的结果赋值给 options[key]。 mergeOptions 函数最后会 merge 所有 options、 mixins、 extends，并将 options 对象返回，然后再去实例化 vue。 钩子函数的合并我们来看看钩子函数是怎么进行合并的。 function mergeHook( parentVal: ?Array&lt;Function&gt;, childVal: ?Function | ?Array&lt;Function&gt; ): ?Array&lt;Function&gt; { return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal } LIFECYCLE_HOOKS.forEach(hook =&gt; { strats[hook] = mergeHook }) 循环 LIFECYCLE_HOOKS 数组，不断调用 mergeHook 函数，将返回值赋值给 strats[hook]。 export const LIFECYCLE_HOOKS = [ &#39;beforeCreate&#39;, &#39;created&#39;, &#39;beforeMount&#39;, &#39;mounted&#39;, &#39;beforeUpdate&#39;, &#39;updated&#39;, &#39;beforeDestroy&#39;, &#39;destroyed&#39;, &#39;activated&#39;, &#39;deactivated&#39;, &#39;errorCaptured&#39; ] LIFECYCLE_HOOKS 就是申明的 vue 所有的钩子函数字符串。 mergeHook 函数会返回 3 层嵌套的三元表达式。 return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal 第一层，如果 childVal 为真，返回第二层三元表达式，如果为假，返回 parentVal。第二层，如果 parentVal 为真，返回 parentVal 和 childVal 合并后的数组，如果 parentVal 为假，返回第三层三元表达式。第三层，如果 childVal 是数组，返回 childVal，否则将 childVal 包装成数组返回。 new Vue({ created: [ function() { console.log(&#39;冲冲冲！&#39;) }, function() { console.log(&#39;鸭鸭鸭！&#39;) } ] }) // =&gt; 冲冲冲！ // =&gt; 鸭鸭鸭！ 项目实践使用 vue 的小伙伴们，当然也少不了在项目中使用 element-ui。比如使用 Table 表格的时候，免不了申明 tableData、total、pageSize 一些 Table 表格、Pagination 分页需要的参数。 我们可以将重复的 data、methods 写在一个 tableMixin 中。 export default { data() { return { total: 0, pageNo: 1, pageSize: 10, tableData: [], loading: false } }, created() { this.searchData() }, methods: { // 预申明，防止报错 searchData() {}, handleSizeChange(size) { this.pageSize = size this.searchData() }, handleCurrentChange(page) { this.pageNo = page this.searchData() }, handleSearchData() { this.pageNo = 1 this.searchData() } } } 当我们需要使用时直接引入即可： import tableMixin from &#39;./tableMixin&#39; export default { ... mixins: [tableMixin], methods: { searchData() { ... } } } 我们在组件内会重新申明 searchData 方法，类似这种 methods 对象形式的 key，如果 key 相同，组件内的 key 会覆盖 tableMixin 中的 key。 当然我们也可以在 mixins 中嵌套 mixins，申明 axiosMixin: import tableMixin from &#39;./tableMixin&#39; export default { mixins: [tableMixin], methods: { handleFetch(url) { const { pageNo, pageSize } = this this.loading = true this.axios({ method: &#39;post&#39;, url, data: { ...this.params, pageNo, pageSize } }) .then(({ data = [] }) =&gt; { this.tableData = data this.loading = false }) .catch(error =&gt; { this.loading = false }) } } } 引入 axiosMixin： import axiosMixin from &#39;./axiosMixin&#39; export default { ... mixins: [axiosMixin], created() { this.handleFetch(&#39;/user/12345&#39;) } } 在 axios 中，我们可以预先处理 axios 的 success、error 的后续调用，是不是少写了很多代码。 extend顺便讲一下 extend，与 mixins 相似，只能传入一个 options 对象，并且 mixins 的优先级比较高，会覆盖 extend 同名 key 值。 // 如果有 child.extends 递归调用 mergeOptions 实现属性拷贝 const extendsFrom = child.extends if (extendsFrom) { parent = mergeOptions(parent, extendsFrom, vm) } // 如果有 child.mixins 递归调用 mergeOptions 实现属性拷贝 if (child.mixins) { for (let i = 0, l = child.mixins.length; i &lt; l; i++) { parent = mergeOptions(parent, child.mixins[i], vm) } } 在 mergeOptions 函数中，会先对 extends 进行属性拷贝，然后再对 mixin 进行拷贝，在调用 mergeField 函数的时候会优先取 child 的 key。 虽然 extends 的同名 key 会被 mixins 的覆盖，但是 extends 是优先执行的。 总结注意一下 vue 中 mixins 的优先级，component &gt; mixins &gt; extends。 我们暂且将 mixins 称作是组件模块化，灵活运用组件模块化，可以将组件内的重复代码提取出来，实现代码复用，也使我们的代码更加清晰，效率也大大提高。 当然，mixins 还有更加神奇的操作等你去探索。","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/tags/技术/"},{"name":"vue","slug":"vue","permalink":"https://leekiwi.github.io/tags/vue/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"Grid 网格布局","slug":"display-grid","date":"2019-05-01T03:17:11.000Z","updated":"2019-07-30T01:29:54.975Z","comments":true,"path":"2019/05/01/display-grid/","link":"","permalink":"https://leekiwi.github.io/2019/05/01/display-grid/","excerpt":"前言 本文引自阮一峰的网络日志：CSS Grid 网格布局教程 网格布局（Grid）是最强大的 CSS 布局方案。 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。","text":"前言 本文引自阮一峰的网络日志：CSS Grid 网格布局教程 网格布局（Grid）是最强大的 CSS 布局方案。 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。 上图这样的布局，就是 Grid 布局的拿手好戏。 Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。 Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。 1. 基本概念学习 Grid 布局之前，需要了解一些基本概念。这些概念与日常用的 execl 表格是一样的，非常容易理解 1.1 容器和项目采用网格布局的区域，称为”容器“（container）。容器内部采用网格定位的子元素，称为”项目“（item）。 &lt;div&gt; &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; 上面代码中，最外层的 &lt;div&gt; 元素就是容器，内层的三个 &lt;div&gt; 元素就是项目。 :::warning项目只能是容器的顶层子元素Grid 布局只对项目生效。**::: 1.2 行和列容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。 就是表格中的行和列。 1.3 单元格行和列的交叉区域，称为”单元格”（cell）。 正常情况下，n 行和 m 列会产生 n x m 个单元格。比如，3 行 3 列会产生 9 个单元格。 1.4 网格线划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。 正常情况下，n 行有 n + 1 根水平网格线，m 列有 m + 1 根垂直网格线，比如三行就有四根水平网格线。 上图是一个 4 x 4 的网格，共有 5 根水平网格线和 5 根垂直网格线。 2. 容器属性Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。 2.1 displaydisplay: grid 指定一个容器采用网格布局。 div { display: grid; } 上图是 display: grid 的效果。 默认情况下，容器元素都是块级元素，但也可以设成行内元素。 div { display: inline-grid; } 上面代码指定 div 是一个行内元素，该元素内部采用网格布局。 上图是 display: inline-grid 的效果。 :::warning注意：设为网格布局以后，容器子元素（项目）的 float、display: inline-block、display: table-cell、vertical-align 和 column-* 等设置都将失效。::: 2.2 grid-template-columns/rows 定义行列宽容器指定了网格布局以后，接着就要划分行和列。grid-template-columns 属性定义每一列的列宽，grid-template-rows 属性定义每一行的行高。 .container { display: grid; grid-template-columns: 100px 100px 100px; /* 3 列，每列 100px*/ grid-template-rows: 100px 100px 100px; /* 3 行，每行 100px*/ } 上面代码指定了一个 3 行 3 列的网格，列宽和行高都是 100px。 除了使用绝对单位，也可以使用百分比。 .container { display: grid; grid-template-columns: 33.33% 33.33% 33.33%; grid-template-rows: 33.33% 33.33% 33.33%; } 另外还有一些辅助的方法。 repeat() 重复有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用 repeat 函数，简化重复的值。 .container { display: grid; grid-template-columns: repeat(3, 33.33%); grid-template-rows: repeat(3, 33.33%); } repeat 接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。 repeat 重复某种模式也是可以的。 grid-template-columns: repeat(2, 100px 20px 80px); 上面代码定义了6列，第一列和第四列的宽度为100px，第二列和第五列为20px，第三列和第六列为80px。 auto-fill 自动充满容器有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用 auto-fill 关键字表示自动填充。 .container { display: grid; grid-template-columns: repeat(auto-fill, 100px); } 上面代码表示每列宽度100px，然后自动填充，直到容器不能放置更多的列。 fr 用于比例关系为了方便表示比例关系，网格布局提供了 fr 关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为 1fr和 2fr，就表示后者是前者的两倍。 .container { display: grid; grid-template-columns: 1fr 1fr; } 上面代码表示两个相同宽度的列。 fr 可以与绝对长度的单位结合使用，这时会非常方便。 .container { display: grid; grid-template-columns: 150px 1fr 2fr; } 上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。 minmax() 长度范围minmax() 函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。 grid-template-columns: 1fr 1fr minmax(100px, 1fr); 上面代码中，minmax(100px, 1fr) 表示列宽不小于 100px，不大于 1fr。 auto 自适应auto 关键字表示由浏览器自己决定长度。 grid-template-columns: 100px auto 100px; 上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了 min-width，且这个值大于最大宽度。 网格线的名称grid-template-columns 属性和 grid-template-rows 属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。 .container { display: grid; grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4]; grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4]; } 上面代码指定网格布局为 3 x 3，因此有 4 根垂直网格线和 4 根水平网格线。方括号里面依次是这八根线的名字。 网格布局允许同一根线有多个名字，比如 [fifth-line row-5]。 布局实例grid-template-columns 属性对于网页布局非常有用。 两栏式布局只需要一行代码。 .wrapper { display: grid; grid-template-columns: 70% 30%; } 传统的十二网格布局，写起来也很容易。 grid-template-columns: repeat(12, 1fr); 2.3 grid-gap 定义间隔grid-row-gap 属性设置行与行的间隔（行间距），grid-column-gap 属性设置列与列的间隔（列间距）。 .container { grid-row-gap: 20px; grid-column-gap: 20px; } 上面代码中，grid-row-gap用于设置行间距，grid-column-gap用于设置列间距。 grid-gap 属性是 grid-column-gap 和 grid-row-gap 的合并简写形式，语法如下。 grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;; 因此，上面一段 CSS 代码等同于下面的代码。 .container { grid-gap: 20px 20px; } 如果 grid-gap 省略了第二个值，浏览器认为第二个值等于第一个值。 :::info根据最新标准，上面三个属性名的 grid- 前缀已经删除，grid-column-gap 和 grid-row-gap 写成 column-gap和 row-gap，grid-gap 写成 gap。::: 2.4 grid-template-areas 定义区域网格布局允许指定”区域“（area），一个区域由单个或多个单元格组成。grid-template-areas 属性用于定义区域。这个属性会给每一个单元格定义名称，只要名称相同，那么它们就是同一区域。 .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-template-areas: &#39;a b c&#39; &#39;d e f&#39; &#39;g h i&#39;; } 上面代码先划分出 9 个单元格，然后将其定名为 a 到 i 的九个区域，分别对应这九个单元格。 多个单元格合并成一个区域的写法如下。 grid-template-areas: &#39;a a a&#39; &#39;b b b&#39; &#39;c c c&#39;; 上面代码将9个单元格分成 a、b、c 三个区域。 下面是一个布局实例。 grid-template-areas: &quot;header header header&quot; &quot;main main sidebar&quot; &quot;footer footer footer&quot;; 上面代码中，顶部是页眉区域 header，底部是页脚区域 footer，中间部分则为 main 和 sidebar。 如果某些区域不需要利用，则使用”点”（.）表示。 grid-template-areas: &#39;a . c&#39; &#39;d . f&#39; &#39;g . i&#39;; 上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。 :::warning注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为 区域名-start，终止网格线自动命名为 区域名-end。 比如，区域名为 header，则起始位置的水平网格线和垂直网格线叫做 header-start，终止位置的水平网格线和垂直网格线叫做 header-end。::: 2.5 grid-auto-flow 项目排列顺序划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。 这个顺序由 grid-auto-flow 属性决定，默认值是 row，即”先行后列”。也可以将它设成 column，变成”先列后行”。 grid-auto-flow: column; 上面代码设置了column以后，放置顺序就变成了下图。 grid-auto-flow 属性除了设置成 row 和 column，还可以设成 row dense 和 column dense。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。 下面的例子让1号项目和2号项目各占据两个单元格，然后在默认的 grid-auto-flow: row 情况下，会产生下面这样的布局。 上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。 现在修改设置，设为 row dense，表示”先行后列”，并且尽可能紧密填满，尽量不出现空格。 grid-auto-flow: row dense; 上面代码的效果如下。 如果将设置改为 column dense，表示”先列后行”，并且尽量填满空格。 grid-auto-flow: column dense; 上面代码的效果如下。 2.6 justify-items，align-items，place-itemsjustify-items 属性设置单元格内容的水平位置，align-items属性设置单元格内容的垂直位置。 .container { justify-items: start | end | center | stretch; align-items: start | end | center | stretch; } 这两个属性的写法完全相同，都可以取下面这些值。 start：对齐单元格的起始边缘。 end：对齐单元格的结束边缘。 center：单元格内部居中。 stretch：拉伸，占满单元格的整个宽度（默认值）。 .container { justify-items: start; } 上面代码表示，单元格的内容左对齐，效果如下图。 .container { align-items: start; } 上面代码表示，单元格的内容头部对齐，效果如下图。 place-items 属性是 align-items 属性和 justify-items 属性的合并简写形式。 place-items: &lt;align-items&gt; &lt;justify-items&gt;; 下面是一个例子。 place-items: start end; 如果省略第二个值，则浏览器认为与第一个值相等。 2.7 justify-content，align-content，place-contentjustify-content 属性是整个内容区域在容器里面的水平位置，align-content 属性是整个内容区域的垂直位置。 .container { justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; } 这两个属性的写法完全相同，都可以取下面这些值。 下面的图都以justify-content属性为例，align-content属性的图完全一样，只是将水平方向改成垂直方向。 start - 对齐容器的起始边框。 end - 对齐容器的结束边框。 center - 容器内部居中。 stretch - 项目大小没有指定时，拉伸占据整个网格容器。 space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。 space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。 space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。 place-content 属性是 align-content 属性和 justify-content 属性的合并简写形式。 place-content: &lt;align-content&gt; &lt;justify-content&gt; 下面是一个例子。 place-content: space-around space-evenly; 如果省略第二个值，浏览器就会假定第二个值等于第一个值。 2.8 grid-auto-columns/rows有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。 grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与grid-template-columns和grid-template-rows完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。 下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。 .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-auto-rows: 50px; } 上面代码指定新增的行高统一为50px（原始的行高为100px）。 2.9 grid-template, grid 属性简写grid-template 属性是 grid-template-columns、grid-template-rows 和 grid-template-areas 这三个属性的合并简写形式。 grid 属性是 grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow 这六个属性的合并简写形式。 从易读易写的角度考虑，还是建议不要合并属性。 3. 项目属性下面这些属性定义在项目上面。 3.1 grid-column/row-start/end项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。 grid-column-start：左边框所在的垂直网格线 grid-column-end：右边框所在的垂直网格线 grid-row-start：上边框所在的水平网格线 grid-row-end：下边框所在的水平网格线 指定网格线数字.item-1 { grid-column-start: 2; grid-column-end: 4; } 上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。 上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。 除了 1 号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的 grid-auto-flow 属性决定，这个属性的默认值是 row，因此会”先行后列”进行排列。读者可以把这个属性的值分别改成 column、row dense 和 column dense，看看其他项目的位置发生了怎样的变化。 下面的例子是指定四个边框位置的效果。 .item-1 { grid-column-start: 1; grid-column-end: 3; grid-row-start: 2; grid-row-end: 4; } 指定网格线名称这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。 .item-1 { grid-column-start: header-start; grid-column-end: header-end; } 上面代码中，左边框和右边框的位置，都指定为网格线的名字。 span 跨越网格这四个属性的值还可以使用 span 关键字，表示”跨越“，即左右边框（上下边框）之间跨越多少个网格。 .item-1 { grid-column-start: span 2; } 上面代码表示，1 号项目的左边框距离右边框跨越2个网格。 这与下面的代码效果完全一样。 .item-1 { grid-column-end: span 2; } 使用这四个属性，如果产生了项目的重叠，则使用 z-index 属性指定项目的重叠顺序。 3.2 grid-column/row 属性简写grid-column 属性是 grid-column-start 和 grid-column-end 的合并简写形式grid-row 属性是 grid-row-start 属性和 grid-row-end 的合并简写形式。 .item { grid-column: / ; grid-row: / ; } 下面是一个例子。 .item-1 { grid-column: 1 / 3; grid-row: 1 / 2; } /* 等同于 */ .item-1 { grid-column-start: 1; grid-column-end: 3; grid-row-start: 1; grid-row-end: 2; } 上面代码中，项目 item-1 占据第一行，从第一根列线到第三根列线。 这两个属性之中，也可以使用 span 关键字，表示跨越多少个网格。 .item-1 { background: #b03532; grid-column: 1 / 3; grid-row: 1 / 3; } /* 等同于 */ .item-1 { background: #b03532; grid-column: 1 / span 2; grid-row: 1 / span 2; } 上面代码中，项目item-1占据的区域，包括第一行 + 第二行、第一列 + 第二列。 斜杠以及后面的部分可以省略，默认跨越一个网格。 .item-1 { grid-column: 1; grid-row: 1; } 上面代码中，项目 item-1 占据左上角第一个网格。 3.3 grid-area 指定放置区域grid-area 属性指定项目放在哪一个区域。 .item-1 { grid-area: e; } 上面代码中，1号项目位于 e 区域，效果如下图。 grid-area 属性还可用作 grid-row-start、grid-column-start、grid-row-end、grid-column-end 的合并简写形式，直接指定项目的位置。 .item { grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;; } 下面是一个例子。 .item-1 { grid-area: 1 / 1 / 3 / 3; } 3.4 justify-self，align-self，place-selfjustify-self 属性设置单元格内容的水平位置（左中右），跟 justify-items 属性的用法完全一致，但只作用于单个项目。 align-self 属性设置单元格内容的垂直位置（上中下），跟 align-items 属性的用法完全一致，也是只作用于单个项目。 .item { justify-self: start | end | center | stretch; align-self: start | end | center | stretch; } 这两个属性都可以取下面四个值。 start：对齐单元格的起始边缘。 end：对齐单元格的结束边缘。 center：单元格内部居中。 stretch：拉伸，占满单元格的整个宽度（默认值）。 下面是 justify-self: start 的例子。 .item-1 { justify-self: start; } place-self 属性是 align-self 属性和 justify-self 属性的合并简写形式。 place-self: &lt;align-self&gt; &lt;justify-self&gt;; 下面是一个例子。 place-self: center center; 如果省略第二个值，place-self 属性会认为这两个值相等。 4. 兼容性 Can I use","categories":[{"name":"布局","slug":"布局","permalink":"https://leekiwi.github.io/categories/布局/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://leekiwi.github.io/tags/CSS/"},{"name":"CSS3","slug":"CSS3","permalink":"https://leekiwi.github.io/tags/CSS3/"}],"keywords":[{"name":"布局","slug":"布局","permalink":"https://leekiwi.github.io/categories/布局/"}]},{"title":"JS 运算符的优先级","slug":"JS运算符优先级","date":"2018-10-18T15:54:05.000Z","updated":"2019-07-30T06:19:23.024Z","comments":true,"path":"2018/10/18/JS运算符优先级/","link":"","permalink":"https://leekiwi.github.io/2018/10/18/JS运算符优先级/","excerpt":"","text":"运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。 结合性结合性决定了拥有相同优先级的运算符的执行顺序。考虑下面这个表达式： a OP b OP c 左结合（左到右）相当于把左边的子表达式加上小括号 (a OP b) OP c，右关联（右到左）相当于 a OP (b OP c)。 赋值运算符是右关联的，所以你可以这么写： a = b = 5; 结果 a 和 b 的值都会成为5。这是因为赋值运算符的返回结果就是赋值运算符右边的那个值，具体过程是：b 被赋值为 5，然后 a 也被赋值为 b=5 的返回值，也就是 5。 汇总表下面的表将所有运算符按照优先级的不同从高到低排列。 优先级 运算类型 关联性 运算符 20 圆括号 n/a ( … ) 19 成员访问 从左到右 … . … 需计算的成员访问 从左到右 … [ … ] new (带参数列表) n/a new … ( … ) 函数调用 从左到右 … ( … ) 18 new (无参数列表) 从右到左 new … 17 后置递增(运算符在后) n/a … ++ 后置递减(运算符在后) … – 16 逻辑非 从右到左 ! … 按位非 ~ … 一元加法 + … 一元减法 - … 前置递增 ++ … 前置递减 – … typeof typeof … void void … delete delete … await await … 15 幂 从右到左 … ** … 14 乘法 从左到右 … * … 除法 … / … 取模 … % … 13 加法 从左到右 … + … 减法 … - … 12 按位左移 从左到右 … &lt;&lt; … 按位右移 … &gt;&gt; … 无符号右移 … &gt;&gt;&gt; … 11 小于 从左到右 … &lt; … 小于等于 … &lt;= … 大于 … &gt; … 大于等于 … &gt;= … in … in … instanceof … instanceof … 10 等号 从左到右 … == … 非等号 … != … 全等号 … === … 非全等号 … !== … 9 按位与 从左到右 … &amp; … 8 按位异或 从左到右 … ^ … 7 按位或 从左到右 … 6 逻辑与 从左到右 … &amp;&amp; … 5 逻辑或 从左到右 … 4 条件运算符 从右到左 … ? … : … 3 赋值 从右到左 … = … … += … … -= … … *= … … /= … … %= … … &lt;&lt;= … … &gt;&gt;= … … &gt;&gt;&gt;= … … &amp;= … … ^= … … 2 yield 从右到左 yield … yield* yield* … 1 展开运算符 n/a … … 0 逗号 从左到右 … , … var a = { x:1 }; var b = a; b.c = a = {y:1}; //=&gt; 点的优先级高于 = 的优先级 a //=&gt; {y:1} b //=&gt; {x:1, c: {y:1}} 关于 new//=&gt; new 后面构造函数没有括号，优先级低于点，相当于 new 一个 Foo.getName 函数，以构造函数的形式执行 new Foo.getName(); //=&gt;有括号，优先级相当，先执行 new，相当于(new Foo()).getName()，返回新实例，调用原型上的 getName() 方法 new Foo().getName(); //=&gt; 先执行 new Foo()，返回一个新实例 // 然后由于实例后面没有括号，相当于 new 一个实例的 getName 函数，以构造函数的形式执行 new new Foo().getName();","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/tags/技术/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://leekiwi.github.io/tags/JavaScript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2016-12-12T14:16:01.000Z","updated":"2019-07-30T06:18:52.268Z","comments":true,"path":"2016/12/12/Hexo-Theme-Sakura/","link":"","permalink":"https://leekiwi.github.io/2016/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://leekiwi.github.io/tags/web/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://leekiwi.github.io/categories/技术/"}]}]}